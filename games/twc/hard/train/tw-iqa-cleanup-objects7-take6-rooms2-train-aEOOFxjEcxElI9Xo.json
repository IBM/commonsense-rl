{
  "version": 1,
  "world": [
    {
      "name": "at",
      "arguments": [
        {
          "name": "P",
          "type": "P"
        },
        {
          "name": "r_1",
          "type": "r"
        }
      ]
    },
    {
      "name": "at",
      "arguments": [
        {
          "name": "c_0",
          "type": "c"
        },
        {
          "name": "r_1",
          "type": "r"
        }
      ]
    },
    {
      "name": "at",
      "arguments": [
        {
          "name": "c_1",
          "type": "c"
        },
        {
          "name": "r_1",
          "type": "r"
        }
      ]
    },
    {
      "name": "at",
      "arguments": [
        {
          "name": "c_2",
          "type": "c"
        },
        {
          "name": "r_0",
          "type": "r"
        }
      ]
    },
    {
      "name": "at",
      "arguments": [
        {
          "name": "c_3",
          "type": "c"
        },
        {
          "name": "r_1",
          "type": "r"
        }
      ]
    },
    {
      "name": "at",
      "arguments": [
        {
          "name": "o_3",
          "type": "o"
        },
        {
          "name": "r_0",
          "type": "r"
        }
      ]
    },
    {
      "name": "at",
      "arguments": [
        {
          "name": "o_5",
          "type": "o"
        },
        {
          "name": "r_0",
          "type": "r"
        }
      ]
    },
    {
      "name": "at",
      "arguments": [
        {
          "name": "s_0",
          "type": "s"
        },
        {
          "name": "r_1",
          "type": "r"
        }
      ]
    },
    {
      "name": "at",
      "arguments": [
        {
          "name": "s_1",
          "type": "s"
        },
        {
          "name": "r_1",
          "type": "r"
        }
      ]
    },
    {
      "name": "at",
      "arguments": [
        {
          "name": "s_2",
          "type": "s"
        },
        {
          "name": "r_0",
          "type": "r"
        }
      ]
    },
    {
      "name": "at",
      "arguments": [
        {
          "name": "s_3",
          "type": "s"
        },
        {
          "name": "r_0",
          "type": "r"
        }
      ]
    },
    {
      "name": "at",
      "arguments": [
        {
          "name": "s_4",
          "type": "s"
        },
        {
          "name": "r_0",
          "type": "r"
        }
      ]
    },
    {
      "name": "at",
      "arguments": [
        {
          "name": "s_5",
          "type": "s"
        },
        {
          "name": "r_1",
          "type": "r"
        }
      ]
    },
    {
      "name": "at",
      "arguments": [
        {
          "name": "s_6",
          "type": "s"
        },
        {
          "name": "r_0",
          "type": "r"
        }
      ]
    },
    {
      "name": "east_of",
      "arguments": [
        {
          "name": "r_0",
          "type": "r"
        },
        {
          "name": "r_1",
          "type": "r"
        }
      ]
    },
    {
      "name": "free",
      "arguments": [
        {
          "name": "r_0",
          "type": "r"
        },
        {
          "name": "r_1",
          "type": "r"
        }
      ]
    },
    {
      "name": "free",
      "arguments": [
        {
          "name": "r_1",
          "type": "r"
        },
        {
          "name": "r_0",
          "type": "r"
        }
      ]
    },
    {
      "name": "free",
      "arguments": [
        {
          "name": "slot_1",
          "type": "slot"
        }
      ]
    },
    {
      "name": "free",
      "arguments": [
        {
          "name": "slot_10",
          "type": "slot"
        }
      ]
    },
    {
      "name": "free",
      "arguments": [
        {
          "name": "slot_11",
          "type": "slot"
        }
      ]
    },
    {
      "name": "free",
      "arguments": [
        {
          "name": "slot_12",
          "type": "slot"
        }
      ]
    },
    {
      "name": "free",
      "arguments": [
        {
          "name": "slot_13",
          "type": "slot"
        }
      ]
    },
    {
      "name": "free",
      "arguments": [
        {
          "name": "slot_2",
          "type": "slot"
        }
      ]
    },
    {
      "name": "free",
      "arguments": [
        {
          "name": "slot_3",
          "type": "slot"
        }
      ]
    },
    {
      "name": "free",
      "arguments": [
        {
          "name": "slot_4",
          "type": "slot"
        }
      ]
    },
    {
      "name": "free",
      "arguments": [
        {
          "name": "slot_5",
          "type": "slot"
        }
      ]
    },
    {
      "name": "free",
      "arguments": [
        {
          "name": "slot_6",
          "type": "slot"
        }
      ]
    },
    {
      "name": "free",
      "arguments": [
        {
          "name": "slot_7",
          "type": "slot"
        }
      ]
    },
    {
      "name": "free",
      "arguments": [
        {
          "name": "slot_8",
          "type": "slot"
        }
      ]
    },
    {
      "name": "free",
      "arguments": [
        {
          "name": "slot_9",
          "type": "slot"
        }
      ]
    },
    {
      "name": "in",
      "arguments": [
        {
          "name": "o_2",
          "type": "o"
        },
        {
          "name": "I",
          "type": "I"
        }
      ]
    },
    {
      "name": "in",
      "arguments": [
        {
          "name": "o_4",
          "type": "o"
        },
        {
          "name": "c_2",
          "type": "c"
        }
      ]
    },
    {
      "name": "on",
      "arguments": [
        {
          "name": "o_0",
          "type": "o"
        },
        {
          "name": "s_1",
          "type": "s"
        }
      ]
    },
    {
      "name": "on",
      "arguments": [
        {
          "name": "o_1",
          "type": "o"
        },
        {
          "name": "s_1",
          "type": "s"
        }
      ]
    },
    {
      "name": "on",
      "arguments": [
        {
          "name": "o_6",
          "type": "o"
        },
        {
          "name": "s_0",
          "type": "s"
        }
      ]
    },
    {
      "name": "open",
      "arguments": [
        {
          "name": "c_0",
          "type": "c"
        }
      ]
    },
    {
      "name": "open",
      "arguments": [
        {
          "name": "c_1",
          "type": "c"
        }
      ]
    },
    {
      "name": "open",
      "arguments": [
        {
          "name": "c_2",
          "type": "c"
        }
      ]
    },
    {
      "name": "open",
      "arguments": [
        {
          "name": "c_3",
          "type": "c"
        }
      ]
    },
    {
      "name": "used",
      "arguments": [
        {
          "name": "slot_0",
          "type": "slot"
        }
      ]
    },
    {
      "name": "west_of",
      "arguments": [
        {
          "name": "r_1",
          "type": "r"
        },
        {
          "name": "r_0",
          "type": "r"
        }
      ]
    }
  ],
  "grammar": {
    "theme": "house",
    "names_to_exclude": [
      "",
      null,
      "work table",
      "dirty checkered shirt",
      "dirty cardigan",
      "key holder",
      "washing machine",
      "corridor",
      "laundry room",
      "white cap",
      "dirty maroon dress",
      "laundry basket",
      "dirty yellow dress",
      "hat rack",
      "bench",
      "wet azure dress",
      "suspended shelf",
      "dirty yellow T-shirt",
      "shoe cabinet",
      "umbrella stand",
      "clothes drier",
      "coat hanger"
    ],
    "include_adj": false,
    "blend_descriptions": false,
    "ambiguous_instructions": false,
    "only_last_action": false,
    "blend_instructions": false,
    "allowed_variables_numbering": false,
    "unique_expansion": false
  },
  "quests": [
    {
      "desc": "",
      "reward": 1,
      "commands": [],
      "win_events": [
        {
          "commands": [],
          "actions": [],
          "condition": {
            "name": "trigger",
            "preconditions": [
              {
                "name": "in",
                "arguments": [
                  {
                    "name": "o_0",
                    "type": "o"
                  },
                  {
                    "name": "c_0",
                    "type": "c"
                  }
                ]
              }
            ],
            "postconditions": [
              {
                "name": "in",
                "arguments": [
                  {
                    "name": "o_0",
                    "type": "o"
                  },
                  {
                    "name": "c_0",
                    "type": "c"
                  }
                ]
              },
              {
                "name": "event",
                "arguments": [
                  {
                    "name": "c_0",
                    "type": "c"
                  },
                  {
                    "name": "o_0",
                    "type": "o"
                  }
                ]
              }
            ],
            "command_template": null,
            "reverse_name": null,
            "reverse_command_template": null
          }
        },
        {
          "commands": [],
          "actions": [],
          "condition": {
            "name": "trigger",
            "preconditions": [
              {
                "name": "in",
                "arguments": [
                  {
                    "name": "o_0",
                    "type": "o"
                  },
                  {
                    "name": "c_3",
                    "type": "c"
                  }
                ]
              }
            ],
            "postconditions": [
              {
                "name": "in",
                "arguments": [
                  {
                    "name": "o_0",
                    "type": "o"
                  },
                  {
                    "name": "c_3",
                    "type": "c"
                  }
                ]
              },
              {
                "name": "event",
                "arguments": [
                  {
                    "name": "c_3",
                    "type": "c"
                  },
                  {
                    "name": "o_0",
                    "type": "o"
                  }
                ]
              }
            ],
            "command_template": null,
            "reverse_name": null,
            "reverse_command_template": null
          }
        }
      ],
      "fail_events": []
    },
    {
      "desc": "",
      "reward": 1,
      "commands": [],
      "win_events": [
        {
          "commands": [],
          "actions": [],
          "condition": {
            "name": "trigger",
            "preconditions": [
              {
                "name": "on",
                "arguments": [
                  {
                    "name": "o_1",
                    "type": "o"
                  },
                  {
                    "name": "s_4",
                    "type": "s"
                  }
                ]
              }
            ],
            "postconditions": [
              {
                "name": "on",
                "arguments": [
                  {
                    "name": "o_1",
                    "type": "o"
                  },
                  {
                    "name": "s_4",
                    "type": "s"
                  }
                ]
              },
              {
                "name": "event",
                "arguments": [
                  {
                    "name": "o_1",
                    "type": "o"
                  },
                  {
                    "name": "s_4",
                    "type": "s"
                  }
                ]
              }
            ],
            "command_template": null,
            "reverse_name": null,
            "reverse_command_template": null
          }
        }
      ],
      "fail_events": []
    },
    {
      "desc": "",
      "reward": 1,
      "commands": [],
      "win_events": [
        {
          "commands": [],
          "actions": [],
          "condition": {
            "name": "trigger",
            "preconditions": [
              {
                "name": "in",
                "arguments": [
                  {
                    "name": "o_2",
                    "type": "o"
                  },
                  {
                    "name": "c_0",
                    "type": "c"
                  }
                ]
              }
            ],
            "postconditions": [
              {
                "name": "in",
                "arguments": [
                  {
                    "name": "o_2",
                    "type": "o"
                  },
                  {
                    "name": "c_0",
                    "type": "c"
                  }
                ]
              },
              {
                "name": "event",
                "arguments": [
                  {
                    "name": "c_0",
                    "type": "c"
                  },
                  {
                    "name": "o_2",
                    "type": "o"
                  }
                ]
              }
            ],
            "command_template": null,
            "reverse_name": null,
            "reverse_command_template": null
          }
        },
        {
          "commands": [],
          "actions": [],
          "condition": {
            "name": "trigger",
            "preconditions": [
              {
                "name": "in",
                "arguments": [
                  {
                    "name": "o_2",
                    "type": "o"
                  },
                  {
                    "name": "c_3",
                    "type": "c"
                  }
                ]
              }
            ],
            "postconditions": [
              {
                "name": "in",
                "arguments": [
                  {
                    "name": "o_2",
                    "type": "o"
                  },
                  {
                    "name": "c_3",
                    "type": "c"
                  }
                ]
              },
              {
                "name": "event",
                "arguments": [
                  {
                    "name": "c_3",
                    "type": "c"
                  },
                  {
                    "name": "o_2",
                    "type": "o"
                  }
                ]
              }
            ],
            "command_template": null,
            "reverse_name": null,
            "reverse_command_template": null
          }
        }
      ],
      "fail_events": []
    },
    {
      "desc": "",
      "reward": 1,
      "commands": [],
      "win_events": [
        {
          "commands": [],
          "actions": [],
          "condition": {
            "name": "trigger",
            "preconditions": [
              {
                "name": "in",
                "arguments": [
                  {
                    "name": "o_3",
                    "type": "o"
                  },
                  {
                    "name": "c_0",
                    "type": "c"
                  }
                ]
              }
            ],
            "postconditions": [
              {
                "name": "in",
                "arguments": [
                  {
                    "name": "o_3",
                    "type": "o"
                  },
                  {
                    "name": "c_0",
                    "type": "c"
                  }
                ]
              },
              {
                "name": "event",
                "arguments": [
                  {
                    "name": "c_0",
                    "type": "c"
                  },
                  {
                    "name": "o_3",
                    "type": "o"
                  }
                ]
              }
            ],
            "command_template": null,
            "reverse_name": null,
            "reverse_command_template": null
          }
        },
        {
          "commands": [],
          "actions": [],
          "condition": {
            "name": "trigger",
            "preconditions": [
              {
                "name": "in",
                "arguments": [
                  {
                    "name": "o_3",
                    "type": "o"
                  },
                  {
                    "name": "c_3",
                    "type": "c"
                  }
                ]
              }
            ],
            "postconditions": [
              {
                "name": "in",
                "arguments": [
                  {
                    "name": "o_3",
                    "type": "o"
                  },
                  {
                    "name": "c_3",
                    "type": "c"
                  }
                ]
              },
              {
                "name": "event",
                "arguments": [
                  {
                    "name": "c_3",
                    "type": "c"
                  },
                  {
                    "name": "o_3",
                    "type": "o"
                  }
                ]
              }
            ],
            "command_template": null,
            "reverse_name": null,
            "reverse_command_template": null
          }
        }
      ],
      "fail_events": []
    },
    {
      "desc": "",
      "reward": 1,
      "commands": [],
      "win_events": [
        {
          "commands": [],
          "actions": [],
          "condition": {
            "name": "trigger",
            "preconditions": [
              {
                "name": "in",
                "arguments": [
                  {
                    "name": "o_4",
                    "type": "o"
                  },
                  {
                    "name": "c_0",
                    "type": "c"
                  }
                ]
              }
            ],
            "postconditions": [
              {
                "name": "in",
                "arguments": [
                  {
                    "name": "o_4",
                    "type": "o"
                  },
                  {
                    "name": "c_0",
                    "type": "c"
                  }
                ]
              },
              {
                "name": "event",
                "arguments": [
                  {
                    "name": "c_0",
                    "type": "c"
                  },
                  {
                    "name": "o_4",
                    "type": "o"
                  }
                ]
              }
            ],
            "command_template": null,
            "reverse_name": null,
            "reverse_command_template": null
          }
        },
        {
          "commands": [],
          "actions": [],
          "condition": {
            "name": "trigger",
            "preconditions": [
              {
                "name": "in",
                "arguments": [
                  {
                    "name": "o_4",
                    "type": "o"
                  },
                  {
                    "name": "c_3",
                    "type": "c"
                  }
                ]
              }
            ],
            "postconditions": [
              {
                "name": "in",
                "arguments": [
                  {
                    "name": "o_4",
                    "type": "o"
                  },
                  {
                    "name": "c_3",
                    "type": "c"
                  }
                ]
              },
              {
                "name": "event",
                "arguments": [
                  {
                    "name": "c_3",
                    "type": "c"
                  },
                  {
                    "name": "o_4",
                    "type": "o"
                  }
                ]
              }
            ],
            "command_template": null,
            "reverse_name": null,
            "reverse_command_template": null
          }
        }
      ],
      "fail_events": []
    },
    {
      "desc": "",
      "reward": 1,
      "commands": [],
      "win_events": [
        {
          "commands": [],
          "actions": [],
          "condition": {
            "name": "trigger",
            "preconditions": [
              {
                "name": "in",
                "arguments": [
                  {
                    "name": "o_5",
                    "type": "o"
                  },
                  {
                    "name": "c_0",
                    "type": "c"
                  }
                ]
              }
            ],
            "postconditions": [
              {
                "name": "in",
                "arguments": [
                  {
                    "name": "o_5",
                    "type": "o"
                  },
                  {
                    "name": "c_0",
                    "type": "c"
                  }
                ]
              },
              {
                "name": "event",
                "arguments": [
                  {
                    "name": "c_0",
                    "type": "c"
                  },
                  {
                    "name": "o_5",
                    "type": "o"
                  }
                ]
              }
            ],
            "command_template": null,
            "reverse_name": null,
            "reverse_command_template": null
          }
        },
        {
          "commands": [],
          "actions": [],
          "condition": {
            "name": "trigger",
            "preconditions": [
              {
                "name": "in",
                "arguments": [
                  {
                    "name": "o_5",
                    "type": "o"
                  },
                  {
                    "name": "c_3",
                    "type": "c"
                  }
                ]
              }
            ],
            "postconditions": [
              {
                "name": "in",
                "arguments": [
                  {
                    "name": "o_5",
                    "type": "o"
                  },
                  {
                    "name": "c_3",
                    "type": "c"
                  }
                ]
              },
              {
                "name": "event",
                "arguments": [
                  {
                    "name": "c_3",
                    "type": "c"
                  },
                  {
                    "name": "o_5",
                    "type": "o"
                  }
                ]
              }
            ],
            "command_template": null,
            "reverse_name": null,
            "reverse_command_template": null
          }
        }
      ],
      "fail_events": []
    },
    {
      "desc": "",
      "reward": 1,
      "commands": [],
      "win_events": [
        {
          "commands": [],
          "actions": [],
          "condition": {
            "name": "trigger",
            "preconditions": [
              {
                "name": "in",
                "arguments": [
                  {
                    "name": "o_6",
                    "type": "o"
                  },
                  {
                    "name": "c_1",
                    "type": "c"
                  }
                ]
              }
            ],
            "postconditions": [
              {
                "name": "in",
                "arguments": [
                  {
                    "name": "o_6",
                    "type": "o"
                  },
                  {
                    "name": "c_1",
                    "type": "c"
                  }
                ]
              },
              {
                "name": "event",
                "arguments": [
                  {
                    "name": "c_1",
                    "type": "c"
                  },
                  {
                    "name": "o_6",
                    "type": "o"
                  }
                ]
              }
            ],
            "command_template": null,
            "reverse_name": null,
            "reverse_command_template": null
          }
        }
      ],
      "fail_events": []
    }
  ],
  "infos": [
    [
      "P",
      {
        "id": "P",
        "type": "P",
        "name": null,
        "noun": null,
        "adj": null,
        "desc": null,
        "room_type": "clean",
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "I",
      {
        "id": "I",
        "type": "I",
        "name": null,
        "noun": null,
        "adj": null,
        "desc": null,
        "room_type": null,
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "r_0",
      {
        "id": "r_0",
        "type": "r",
        "name": "corridor",
        "noun": null,
        "adj": null,
        "desc": "You've entered a corridor.\n\n You can see a shoe cabinet.[if c_2 is open and there is something in the c_2] The shoe cabinet contains [a list of things in the c_2].[end if][if c_2 is open and the c_2 contains nothing] Empty! What kind of nightmare TextWorld is this?[end if] You can make out a key holder. The key holder is ordinary.[if there is something on the s_2] On the key holder you make out [a list of things on the s_2]. Suddenly, you bump your head on the ceiling, but it's not such a bad bump that it's going to prevent you from looking at objects and even things.[end if][if there is nothing on the s_2] Unfortunately, there isn't a thing on it. What, you think everything in TextWorld should have stuff on it?[end if] You see a gleam over in a corner, where you can see an umbrella stand. [if there is something on the s_3]You see [a list of things on the s_3] on the umbrella stand. Suddenly, you bump your head on the ceiling, but it's not such a bad bump that it's going to prevent you from looking at objects and even things.[end if][if there is nothing on the s_3]But the thing is empty.[end if] You can see a hat rack. [if there is something on the s_4]On the hat rack you see [a list of things on the s_4].[end if][if there is nothing on the s_4]Looks like someone's already been here and taken everything off it, though.[end if] You smell an intriguing smell, and follow it to a coat hanger. [if there is something on the s_6]On the coat hanger you can see [a list of things on the s_6].[end if][if there is nothing on the s_6]But there isn't a thing on it.[end if]\n\nThere is an exit to the west. Don't worry, there is no door.",
        "room_type": "work",
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "r_1",
      {
        "id": "r_1",
        "type": "r",
        "name": "laundry room",
        "noun": null,
        "adj": null,
        "desc": "You've entered a laundry room.\n\n [if c_0 is locked]A locked[else if c_0 is open]An open[otherwise]A closed[end if] washing machine is right there by you.[if c_0 is open and there is something in the c_0] The washing machine contains [a list of things in the c_0].[end if][if c_0 is open and the c_0 contains nothing] The washing machine is empty! This is the worst thing that could possibly happen, ever![end if] You can see a clothes drier.[if c_1 is open and there is something in the c_1] The clothes drier contains [a list of things in the c_1].[end if][if c_1 is open and the c_1 contains nothing] The clothes drier is empty! This is the worst thing that could possibly happen, ever![end if] You can make out [if c_3 is locked]a locked[else if c_3 is open]an opened[otherwise]a closed[end if] laundry basket.[if c_3 is open and there is something in the c_3] The laundry basket contains [a list of things in the c_3].[end if][if c_3 is open and the c_3 contains nothing] The laundry basket is empty, what a horrible day![end if] Oh, great. Here's a suspended shelf. [if there is something on the s_0]On the suspended shelf you can see [a list of things on the s_0].[end if][if there is nothing on the s_0]Looks like someone's already been here and taken everything off it, though.[end if] You make out a bench. [if there is something on the s_1]On the bench you can make out [a list of things on the s_1].[end if][if there is nothing on the s_1]But oh no! there's nothing on this piece of trash.[end if] You make out a work table. You shudder, but continue examining the work table. The work table is usual.[if there is something on the s_5] On the work table you can make out [a list of things on the s_5].[end if][if there is nothing on the s_5] The work table appears to be empty.[end if]\n\nThere is an exit to the east.",
        "room_type": "clean",
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "c_0",
      {
        "id": "c_0",
        "type": "c",
        "name": "washing machine",
        "noun": "washing machine",
        "adj": null,
        "desc": "The [noun] looks towering. [if open]It is open.[else if locked]It is locked.[otherwise]It is closed.[end if]",
        "room_type": "clean",
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "c_1",
      {
        "id": "c_1",
        "type": "c",
        "name": "clothes drier",
        "noun": "clothes drier",
        "adj": null,
        "desc": "The [noun] looks rugged. [if open]It is open.[else if locked]It is locked.[otherwise]It is closed.[end if]",
        "room_type": "clean",
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "c_2",
      {
        "id": "c_2",
        "type": "c",
        "name": "shoe cabinet",
        "noun": "shoe cabinet",
        "adj": null,
        "desc": "The [noun] looks hefty. [if open]You can see inside it.[else if locked]There is a lock on it and seems impossible to bash open.[otherwise]You can't see inside it because the lid's in your way.[end if]",
        "room_type": "work",
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "c_3",
      {
        "id": "c_3",
        "type": "c",
        "name": "laundry basket",
        "noun": "laundry basket",
        "adj": null,
        "desc": "The [noun] looks commanding. [if open]It is open.[else if locked]It is locked.[otherwise]It is closed.[end if]",
        "room_type": "clean",
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "o_3",
      {
        "id": "o_3",
        "type": "o",
        "name": "dirty cardigan",
        "noun": "dirty cardigan",
        "adj": null,
        "desc": "The [noun] is brand new.",
        "room_type": "work",
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "o_5",
      {
        "id": "o_5",
        "type": "o",
        "name": "dirty maroon dress",
        "noun": "dirty maroon dress",
        "adj": null,
        "desc": "The [noun] looks out of place here",
        "room_type": "work",
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "s_0",
      {
        "id": "s_0",
        "type": "s",
        "name": "suspended shelf",
        "noun": "suspended shelf",
        "adj": null,
        "desc": "The [noun] is unstable.",
        "room_type": "clean",
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "s_1",
      {
        "id": "s_1",
        "type": "s",
        "name": "bench",
        "noun": "bench",
        "adj": "w",
        "desc": "The [noun] is solid.",
        "room_type": "clean",
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "s_2",
      {
        "id": "s_2",
        "type": "s",
        "name": "key holder",
        "noun": "key holder",
        "adj": null,
        "desc": "The [noun] is stable.",
        "room_type": "work",
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "s_3",
      {
        "id": "s_3",
        "type": "s",
        "name": "umbrella stand",
        "noun": "umbrella stand",
        "adj": null,
        "desc": "The [noun] is solidly built.",
        "room_type": "work",
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "s_4",
      {
        "id": "s_4",
        "type": "s",
        "name": "hat rack",
        "noun": "hat rack",
        "adj": null,
        "desc": "The [noun] is unstable.",
        "room_type": "work",
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "s_5",
      {
        "id": "s_5",
        "type": "s",
        "name": "work table",
        "noun": "work table",
        "adj": null,
        "desc": "The [noun] is an unstable piece of junk.",
        "room_type": "clean",
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "s_6",
      {
        "id": "s_6",
        "type": "s",
        "name": "coat hanger",
        "noun": "coat hanger",
        "adj": null,
        "desc": "The [noun] is solid.",
        "room_type": "work",
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "slot_1",
      {
        "id": "slot_1",
        "type": "slot",
        "name": "",
        "noun": null,
        "adj": null,
        "desc": "",
        "room_type": null,
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "slot_10",
      {
        "id": "slot_10",
        "type": "slot",
        "name": "",
        "noun": null,
        "adj": null,
        "desc": "",
        "room_type": null,
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "slot_11",
      {
        "id": "slot_11",
        "type": "slot",
        "name": "",
        "noun": null,
        "adj": null,
        "desc": "",
        "room_type": null,
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "slot_12",
      {
        "id": "slot_12",
        "type": "slot",
        "name": "",
        "noun": null,
        "adj": null,
        "desc": "",
        "room_type": null,
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "slot_13",
      {
        "id": "slot_13",
        "type": "slot",
        "name": "",
        "noun": null,
        "adj": null,
        "desc": "",
        "room_type": null,
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "slot_2",
      {
        "id": "slot_2",
        "type": "slot",
        "name": "",
        "noun": null,
        "adj": null,
        "desc": "",
        "room_type": null,
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "slot_3",
      {
        "id": "slot_3",
        "type": "slot",
        "name": "",
        "noun": null,
        "adj": null,
        "desc": "",
        "room_type": null,
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "slot_4",
      {
        "id": "slot_4",
        "type": "slot",
        "name": "",
        "noun": null,
        "adj": null,
        "desc": "",
        "room_type": null,
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "slot_5",
      {
        "id": "slot_5",
        "type": "slot",
        "name": "",
        "noun": null,
        "adj": null,
        "desc": "",
        "room_type": null,
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "slot_6",
      {
        "id": "slot_6",
        "type": "slot",
        "name": "",
        "noun": null,
        "adj": null,
        "desc": "",
        "room_type": null,
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "slot_7",
      {
        "id": "slot_7",
        "type": "slot",
        "name": "",
        "noun": null,
        "adj": null,
        "desc": "",
        "room_type": null,
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "slot_8",
      {
        "id": "slot_8",
        "type": "slot",
        "name": "",
        "noun": null,
        "adj": null,
        "desc": "",
        "room_type": null,
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "slot_9",
      {
        "id": "slot_9",
        "type": "slot",
        "name": "",
        "noun": null,
        "adj": null,
        "desc": "",
        "room_type": null,
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "o_2",
      {
        "id": "o_2",
        "type": "o",
        "name": "dirty yellow dress",
        "noun": "dirty yellow dress",
        "adj": null,
        "desc": "The [noun] appears to fit in here",
        "room_type": "clean",
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "o_4",
      {
        "id": "o_4",
        "type": "o",
        "name": "dirty checkered shirt",
        "noun": "dirty checkered shirt",
        "adj": null,
        "desc": "The [noun] is brand new.",
        "room_type": "work",
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "o_0",
      {
        "id": "o_0",
        "type": "o",
        "name": "dirty yellow T-shirt",
        "noun": "dirty yellow T-shirt",
        "adj": null,
        "desc": "The [noun] appears to be out of place here",
        "room_type": "clean",
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "o_1",
      {
        "id": "o_1",
        "type": "o",
        "name": "white cap",
        "noun": "white cap",
        "adj": null,
        "desc": "The [noun] is modern.",
        "room_type": "clean",
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "o_6",
      {
        "id": "o_6",
        "type": "o",
        "name": "wet azure dress",
        "noun": "wet azure dress",
        "adj": null,
        "desc": "The [noun] is antiquated.",
        "room_type": "clean",
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ],
    [
      "slot_0",
      {
        "id": "slot_0",
        "type": "slot",
        "name": "",
        "noun": null,
        "adj": null,
        "desc": "",
        "room_type": null,
        "definite": null,
        "indefinite": null,
        "synonyms": null
      }
    ]
  ],
  "KB": {
    "logic": "# supporter\ntype s : t {\n    predicates {\n        on(o, s);\n    }\n\n    inform7 {\n        type {\n            kind :: \"supporter\";\n            definition :: \"supporters are fixed in place.\";\n        }\n\n        predicates {\n            on(o, s) :: \"The {o} is on the {s}\";\n        }\n    }\n}\n\n# thing\ntype t {\n    predicates {\n        sharp(t);\n        cuttable(t);\n        cookable(t);\n        drinkable(t);\n    }\n\n    rules {\n        examine/t :: at(P, r) & $at(t, r) -> at(P, r);\n    }\n\n    inform7 {\n        type {\n            kind :: \"thing\";\n            definition :: \"a thing can be drinkable. a thing is usually not drinkable. a thing can be cookable. a thing is usually not cookable. a thing can be damaged. a thing is usually not damaged. a thing can be sharp. a thing is usually not sharp. a thing can be cuttable. a thing is usually not cuttable. a thing can be a source of heat. Type of cooking is a kind of value. The type of cooking are raw, grilled, roasted and fried. a thing can be needs cooking. Type of cutting is a kind of value. The type of cutting are uncut, sliced, diced and chopped.\";\n        }\n\n        predicates {\n            sharp(t) :: \"The {t} is sharp\";\n            cookable(t) :: \"The {t} is cookable\";\n            cuttable(t) :: \"The {t} is cuttable\";\n            drinkable(t) :: \"The {t} is drinkable\";\n        }\n\n        commands {\n            examine/t :: \"examine {t}\" :: \"examining the {t}\";\n        }\n    }\n}\n\ntype object {\n    inform7 {\n        type {\n            kind :: \"object\";\n        }\n    }\n}\n\n# room\ntype r {\n    predicates {\n        at(P, r);\n        at(t, r);\n\n        north_of(r, r);\n        west_of(r, r);\n\n        north_of/d(r, d, r);\n        west_of/d(r, d, r);\n\n        free(r, r);\n\n        #south_of(r, r') = north_of(r', r);\n        #east_of(r, r') = west_of(r', r);\n\n        #south_of/d(r, d, r') = north_of/d(r', d, r);\n        #east_of/d(r, d, r') = west_of/d(r', d, r);\n    }\n\n    rules {\n        go/north :: at(P, r) & $north_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/south :: at(P, r) & $south_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/east  :: at(P, r) & $east_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/west  :: at(P, r) & $west_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n\n        look :: at(P, r) -> at(P, r);\n    }\n\n    reverse_rules {\n        go/north :: go/south;\n        go/west :: go/east;\n    }\n\n    constraints {\n        r1 :: at(P, r) & at(P, r') -> fail();\n        r2 :: at(s, r) & at(s, r') -> fail();\n        r3 :: at(c, r) & at(c, r') -> fail();\n\n        # An exit direction can only lead to one room.\n        nav_rr1 :: north_of(r, r') & north_of(r'', r') -> fail();\n        nav_rr2 :: south_of(r, r') & south_of(r'', r') -> fail();\n        nav_rr3 :: east_of(r, r') & east_of(r'', r') -> fail();\n        nav_rr4 :: west_of(r, r') & west_of(r'', r') -> fail();\n\n        # Two rooms can only be connected once with each other.\n        nav_rrA :: north_of(r, r') & south_of(r, r') -> fail();\n        nav_rrB :: north_of(r, r') & west_of(r, r') -> fail();\n        nav_rrC :: north_of(r, r') & east_of(r, r') -> fail();\n        nav_rrD :: south_of(r, r') & west_of(r, r') -> fail();\n        nav_rrE :: south_of(r, r') & east_of(r, r') -> fail();\n        nav_rrF :: west_of(r, r')  & east_of(r, r') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"room\";\n        }\n\n        predicates {\n            at(P, r) :: \"The player is in {r}\";\n            at(s, r) :: \"The {s} is in {r}\";\n            at(c, r) :: \"The {c} is in {r}\";\n            at(o, r) :: \"The {o} is in {r}\";\n\n            north_of(r, r') :: \"The {r} is mapped north of {r'}\";\n            south_of(r, r') :: \"The {r} is mapped south of {r'}\";\n            east_of(r, r') :: \"The {r} is mapped east of {r'}\";\n            west_of(r, r') :: \"The {r} is mapped west of {r'}\";\n\n            north_of/d(r, d, r') :: \"South of {r} and north of {r'} is a door called {d}\";\n            south_of/d(r, d, r') :: \"North of {r} and south of {r'} is a door called {d}\";\n            east_of/d(r, d, r') :: \"West of {r} and east of {r'} is a door called {d}\";\n            west_of/d(r, d, r') :: \"East of {r} and west of {r'} is a door called {d}\";\n        }\n\n        commands {\n            go/north :: \"go north\" :: \"going north\";\n            go/south :: \"go south\" :: \"going south\";\n            go/east :: \"go east\" :: \"going east\";\n            go/west :: \"go west\" :: \"going west\";\n\n            look :: \"look\" :: \"looking\";\n        }\n    }\n}\n\n# container\ntype c : t {\n    predicates {\n        open(c);\n        closed(c);\n        locked(c);\n\n        in(o, c);\n    }\n\n    rules {\n        lock/c   :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & closed(c) -> locked(c);\n        unlock/c :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & locked(c) -> closed(c);\n\n        open/c  :: $at(P, r) & $at(c, r) & closed(c) -> open(c);\n        close/c :: $at(P, r) & $at(c, r) & open(c) -> closed(c);\n    }\n\n    reverse_rules {\n        lock/c :: unlock/c;\n        open/c :: close/c;\n    }\n\n    constraints {\n        c1 :: open(c)   & closed(c) -> fail();\n        c2 :: open(c)   & locked(c) -> fail();\n        c3 :: closed(c) & locked(c) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"container\";\n            definition :: \"containers are openable, lockable and fixed in place. containers are usually closed.\";\n        }\n\n        predicates {\n            open(c) :: \"The {c} is open\";\n            closed(c) :: \"The {c} is closed\";\n            locked(c) :: \"The {c} is locked\";\n\n            in(o, c) :: \"The {o} is in the {c}\";\n        }\n\n        commands {\n            open/c :: \"open {c}\" :: \"opening the {c}\";\n            close/c :: \"close {c}\" :: \"closing the {c}\";\n\n            lock/c :: \"lock {c} with {k}\" :: \"locking the {c} with the {k}\";\n            unlock/c :: \"unlock {c} with {k}\" :: \"unlocking the {c} with the {k}\";\n        }\n    }\n}\n\n# key\ntype k : o {\n    predicates {\n        match(k, c);\n        match(k, d);\n    }\n\n    constraints {\n        k1 :: match(k, c) & match(k', c) -> fail();\n        k2 :: match(k, c) & match(k, c') -> fail();\n        k3 :: match(k, d) & match(k', d) -> fail();\n        k4 :: match(k, d) & match(k, d') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"key\";\n        }\n\n        predicates {\n            match(k, c) :: \"The matching key of the {c} is the {k}\";\n            match(k, d) :: \"The matching key of the {d} is the {k}\";\n        }\n    }\n}\n\n# Inventory\ntype slot {\n    predicates {\n        free(slot);\n        used(slot);\n    }\n    inform7 {\n        type {\n            kind :: \"thing\";\n            definition :: \"\";\n        }\n        predicates {\n            free(slot) :: \"When play begins, increase the carrying capacity of the player by 1.\";\n            used(slot) :: \"When play begins, increase the carrying capacity of the player by 1.\";\n        }\n    }\n}\n\ntype I {\n    predicates {\n        in(o, I);\n    }\n\n    rules {\n        take :: $at(P, r) & at(o, r) & free(slot) -> in(o, I) & used(slot);\n        drop :: $at(P, r) & in(o, I) & used(slot) -> at(o, r) & free(slot);\n\n        take/c :: $at(P, r) & $at(c, r) & $open(c) & in(o, c) & free(slot) -> in(o, I) & used(slot);\n        insert :: $at(P, r) & $at(c, r) & $open(c) & in(o, I) & used(slot) -> in(o, c) & free(slot);\n\n        take/s :: $at(P, r) & $at(s, r) & on(o, s) & free(slot) -> in(o, I) & used(slot);\n        put    :: $at(P, r) & $at(s, r) & in(o, I) & used(slot) -> on(o, s) & free(slot);\n\n        examine/I :: at(o, I) -> at(o, I);\n        examine/s :: at(P, r) & $at(s, r) & $on(o, s) -> at(P, r);\n        examine/c :: at(P, r) & $at(c, r) & $open(c) & $in(o, c) -> at(P, r);\n    }\n\n    reverse_rules {\n        take :: drop;\n        take/c :: insert;\n        take/s :: put;\n    }\n\n    inform7 {\n        predicates {\n            in(o, I) :: \"The player carries the {o}\";\n        }\n\n        commands {\n            take :: \"take {o}\" :: \"taking the {o}\";\n            drop :: \"drop {o}\" :: \"dropping the {o}\";\n\n            take/c :: \"take {o} from {c}\" :: \"removing the {o} from the {c}\";\n            insert :: \"insert {o} into {c}\" :: \"inserting the {o} into the {c}\";\n\n            take/s :: \"take {o} from {s}\" :: \"removing the {o} from the {s}\";\n            put :: \"put {o} on {s}\" :: \"putting the {o} on the {s}\";\n\n            inventory :: \"inventory\" :: \"taking inventory\";\n\n            examine/I :: \"examine {o}\" :: \"examining the {o}\";\n            examine/s :: \"examine {o}\" :: \"examining the {o}\";\n            examine/c :: \"examine {o}\" :: \"examining the {o}\";\n        }\n    }\n}\n\n## box: i.e. portable container\n#type box : c, o {\n#\n#    predicates {\n#\n#        reachable_box_I(P, I, box) = in(box, I);\n#        reachable_box_r(P, r, box) = at(P, r) & at(box, r);\n#        reachable_box_s(P, r, s, box) = at(P, r) & at(s, r) & on(box, s);\n#        reachable_box_c(P, r, c, box) = at(P, r) & at(c, r) & open(c) & in(box, c);\n#    }\n#\n#    rules {\n#        insert/box :: $reachable_box_I(P, I, box) & $open(box) & in(o, I) -> in(o, box);\n#        insert/box/s :: $reachable_box_s(P, r, s, box) & in(o, I) -> in(o, box);\n#        insert/box/c :: $reachable_box_c(P, r, c, box) & in(o, I) -> in(o, box);\n#    }\n#\n#    inform7 {\n#        type {\n#            kind :: \"box-like\";\n#            definition :: \"box-like is a kind of container. box-like is portable.\";\n#        }\n#\n#        commands {\n#            insert/box :: \"insert {o} into {box}\" :: \"inserting the {o} into the {box}\";\n#            insert/box/s :: \"insert {o} into {box}\" :: \"inserting the {o} into the {box}\";\n#            insert/box/c :: \"insert {o} into {box}\" :: \"inserting the {o} into the {box}\";\n#        }\n#    }\n#}\n\n# Player\ntype P {\n    inform7 {\n        code :: \"\"\"\n            The carrying capacity of the player is 0.\n        \"\"\";\n    }\n\n}\n\n# object\ntype o : t {\n    constraints {\n        obj1 :: in(o, I) & in(o, c) -> fail();\n        obj2 :: in(o, I) & on(o, s) -> fail();\n        obj3 :: in(o, I) & at(o, r) -> fail();\n        obj4 :: in(o, c) & on(o, s) -> fail();\n        obj5 :: in(o, c) & at(o, r) -> fail();\n        obj6 :: on(o, s) & at(o, r) -> fail();\n        obj7 :: at(o, r) & at(o, r') -> fail();\n        obj8 :: in(o, c) & in(o, c') -> fail();\n        obj9 :: on(o, s) & on(o, s') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"object-like\";\n            definition :: \"object-like is portable.\";\n        }\n    }\n}\n\n# food\ntype f : o {\n    predicates {\n\n    }\n\n    rules {\n\n    }\n\n    constraints {\n\n    }\n\n    inform7 {\n        type {\n            kind :: \"food\";\n        }\n\n        predicates {\n\n        }\n\n        commands {\n\n        }\n\n    }\n}\n\n# door\ntype d : t {\n    predicates {\n        open(d);\n        closed(d);\n        locked(d);\n\n        link(r, d, r);\n    }\n\n    rules {\n        lock/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & closed(d) -> locked(d);\n        unlock/d :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & locked(d) -> closed(d);\n\n        open/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & closed(d) -> open(d) & free(r, r') & free(r', r);\n        close/d  :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & open(d) & free(r, r') & free(r', r) -> closed(d);\n    }\n\n    reverse_rules {\n        lock/d :: unlock/d;\n        open/d :: close/d;\n    }\n\n    constraints {\n        d1 :: open(d)   & closed(d) -> fail();\n        d2 :: open(d)   & locked(d) -> fail();\n        d3 :: closed(d) & locked(d) -> fail();\n\n        # A door can't be used to link more than two rooms.\n        link1 :: link(r, d, r') & link(r, d, r'') -> fail();\n        link2 :: link(r, d, r') & link(r'', d, r''') -> fail();\n\n        # There's already a door linking two rooms.\n        link3 :: link(r, d, r') & link(r, d', r') -> fail();\n\n        # There cannot be more than four doors in a room.\n        dr2 :: link(r, d1: d, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        free1 :: link(r, d, r') & free(r, r') & closed(d) -> fail();\n        free2 :: link(r, d, r') & free(r, r') & locked(d) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"door\";\n            definition :: \"door is openable and lockable.\";\n        }\n\n        predicates {\n            open(d) :: \"The {d} is open\";\n            closed(d) :: \"The {d} is closed\";\n            locked(d) :: \"The {d} is locked\";\n            link(r, d, r') :: \"\";  # No equivalent in Inform7.\n        }\n\n        commands {\n            open/d :: \"open {d}\" :: \"opening {d}\";\n            close/d :: \"close {d}\" :: \"closing {d}\";\n\n            unlock/d :: \"unlock {d} with {k}\" :: \"unlocking {d} with the {k}\";\n            lock/d :: \"lock {d} with {k}\" :: \"locking {d} with the {k}\";\n        }\n    }\n}\n\n",
    "text_grammars_path": "./textworld_data/text_grammars"
  },
  "metadata": {
    "seeds": {
      "map": 58709,
      "objects": 28808,
      "quest": 40407,
      "grammar": 24717
    },
    "config": {
      "output_dir": "../../games/cleanup/medium/train",
      "data_path": "./iqa_dataset",
      "initial_room": "laundry room",
      "objects": 7,
      "rooms": 2,
      "take": 6,
      "drop": false,
      "distractors": false,
      "isolated_rooms": false,
      "open": false,
      "seed": 1266,
      "seeds": null,
      "force": false,
      "play": false,
      "train": true,
      "test": false,
      "silent": false,
      "verbose": false,
      "level": 2
    },
    "entities": [
      "corridor",
      "laundry room",
      "washing machine",
      "suspended shelf",
      "clothes drier",
      "bench",
      "shoe cabinet",
      "key holder",
      "umbrella stand",
      "hat rack",
      "work table",
      "laundry basket",
      "coat hanger",
      "dirty yellow T-shirt",
      "white cap",
      "dirty yellow dress",
      "dirty cardigan",
      "dirty checkered shirt",
      "dirty maroon dress",
      "wet azure dress"
    ],
    "max_score": 7,
    "goal": "Look for anything that is out of place and put it away in its proper location.",
    "goal_locations": {
      "dirty yellow T-shirt": [
        "washing machine",
        "laundry basket"
      ],
      "white cap": [
        "hat rack"
      ],
      "dirty yellow dress": [
        "washing machine",
        "laundry basket"
      ],
      "dirty cardigan": [
        "washing machine",
        "laundry basket"
      ],
      "dirty checkered shirt": [
        "washing machine",
        "laundry basket"
      ],
      "dirty maroon dress": [
        "washing machine",
        "laundry basket"
      ],
      "wet azure dress": [
        "clothes drier"
      ]
    },
    "uuid": "tw-iqa-cleanup-objects7-take6-rooms2-train-aEOOFxjEcxElI9Xo"
  },
  "objective": "Welcome to TextWorld! You find yourself in a messy house. Many things are not in their usual location. Let's clean up this place. After you'll have done, this little house is going to be spick and span! Look for anything that is out of place and put it away in its proper location."
}